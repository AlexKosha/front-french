import {useEffect, useRef} from 'react';
import {useDispatch, useSelector} from 'react-redux';
import AsyncStorage from '@react-native-async-storage/async-storage';
import isEqual from 'lodash.isequal';

import {getProgress, addThunkProgress} from '../store/progress/progressThunk';
import {selectUserId} from '../store/auth/selector';
import {AppDispatch} from '../store/store';
import {selectProgressData} from '../store/progress/selector';

export const useSyncProgress = () => {
  const userId = useSelector(selectUserId);
  const progressData = useSelector(selectProgressData);
  const dispatch = useDispatch<AppDispatch>();
  const hasSyncedRef = useRef(false); // ‚ú≥Ô∏è –•—É–∫ –∑–∞–ø—É—Å–∫–∞—î—Ç—å—Å—è —Ç—ñ–ª—å–∫–∏ –æ–¥–∏–Ω —Ä–∞–∑

  useEffect(() => {
    const syncProgress = async () => {
      if (hasSyncedRef.current || !userId) return;
      hasSyncedRef.current = true;

      try {
        const jsonValue = await AsyncStorage.getItem('progress_all');
        const localData = jsonValue ? JSON.parse(jsonValue) : null;

        const localUserId = localData?.userId;
        const localProgress = localData?.progress;

        let backendProgress =
          progressData && Object.keys(progressData).length > 0
            ? progressData
            : null;

        if (!backendProgress) {
          const backendResponse = await dispatch(getProgress());
          if (getProgress.fulfilled.match(backendResponse)) {
            backendProgress = backendResponse.payload?.progress || null;
          }
        }

        const isSameUser = localUserId === userId;

        // üü¢ –Ø–∫—â–æ —î –ª–∏—à–µ –ª–æ–∫–∞–ª—å–Ω—ñ, –∞ –±–µ–∫–µ–Ω–¥ –ø–æ—Ä–æ–∂–Ω—ñ–π ‚Äî –æ–Ω–æ–≤–ª—é—î–º–æ –±–µ–∫
        if (localProgress && !backendProgress && isSameUser) {
          await dispatch(addThunkProgress({userId, progress: localProgress}));
          return;
        }

        // üî¥ –Ø–∫—â–æ –±–µ–∫–µ–Ω–¥ –≤—Å–µ —â–µ –ø–æ—Ä–æ–∂–Ω—ñ–π ‚Äî –Ω—ñ—á–æ–≥–æ —Ä–æ–±–∏—Ç–∏
        if (!backendProgress) return;

        // üîÑ –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–º—ñ–Ω–∏–≤—Å—è –∞–±–æ –Ω–µ–º–∞—î –ª–æ–∫–∞–ª—å–Ω–∏—Ö ‚Äî –æ–Ω–æ–≤–∏—Ç–∏ local
        if (!localData || !isSameUser) {
          await AsyncStorage.setItem(
            'progress_all',
            JSON.stringify({userId, progress: backendProgress}),
          );
        }

        // üîÅ –Ø–∫—â–æ –æ–±–∏–¥–≤–∞ –¥–∂–µ—Ä–µ–ª–∞ —î, –∞–ª–µ –Ω–µ –∑–±—ñ–≥–∞—é—Ç—å—Å—è ‚Äî –≤–∏–±–∏—Ä–∞—î–º–æ –∫—Ä–∞—â–µ
        else if (!isEqual(localProgress, backendProgress) && isSameUser) {
          const backendHasMore =
            Object.keys(backendProgress).length >
            Object.keys(localProgress).length;

          const completedCount = (progress: any) =>
            Object.values(progress || {}).filter((item: any) => item?.completed)
              .length;

          const backendCompleted = completedCount(backendProgress);
          const localCompleted = completedCount(localProgress);

          if (
            (backendHasMore || backendCompleted > localCompleted) &&
            isSameUser
          ) {
            // üîº –û–Ω–æ–≤–∏—Ç–∏ –ª–æ–∫–∞–ª—å–Ω–µ —Å—Ö–æ–≤–∏—â–µ –∑ –±–µ–∫–µ–Ω–¥—É
            await AsyncStorage.setItem(
              'progress_all',
              JSON.stringify({userId, progress: backendProgress}),
            );
          } else if (isSameUser) {
            // üîº –û–Ω–æ–≤–∏—Ç–∏ –±–µ–∫–µ–Ω–¥ –ª–æ–∫–∞–ª—å–Ω–∏–º–∏

            await dispatch(addThunkProgress({userId, progress: localProgress}));
          }
        }
      } catch (error) {
        console.log('Error syncing progress:', error);
      }
    };

    syncProgress();
  }, [userId, dispatch, progressData]);
};
