import AsyncStorage from '@react-native-async-storage/async-storage';
import {WordProgress, WordStat} from '../types'; // —ñ–º–ø–æ—Ä—Ç—É–π thunk
import {AppDispatch} from '../store/store';
import {updateLocallyProgress} from '../store/progress/progressThunk';

export const markCurrentWordsAsCompleted = async (
  progress: WordProgress[],
  wordStats: WordStat[],
  level: number,
  titleName: string,
  dispatch: AppDispatch, // <- –¥–æ–¥–∞–Ω–æ dispatch —è–∫ –∞—Ä–≥—É–º–µ–Ω—Ç
): Promise<void> => {
  try {
    const updatedWords = progress.map(word => {
      if (wordStats.some(stat => stat.word._id === word._id)) {
        return {
          ...word,
          completed: word.completed.includes(level)
            ? word.completed
            : [...word.completed, level],
        };
      }
      return word;
    });

    const updatedTheme = {
      [`progress_${titleName}`]: {
        updatedAt: Date.now(),
        words: updatedWords,
      },
    };

    // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ AsyncStorage
    const jsonValue = await AsyncStorage.getItem('progress_all');
    const allData = jsonValue != null ? JSON.parse(jsonValue) : {};
    allData.progress = allData.progress || {};
    allData.progress[`progress_${titleName}`] =
      updatedTheme[`progress_${titleName}`];

    console.log('progressLocal', updatedTheme);
    await AsyncStorage.setItem('progress_all', JSON.stringify(allData));

    // üß† –ü–µ—Ä–µ–¥–∞—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω—É —Ç–µ–º—É –≤ Redux
    dispatch(updateLocallyProgress(updatedTheme));
  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–æ–≥—Ä–µ—Å—É:', error);
  }
};
