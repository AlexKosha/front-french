import {PayloadAction} from '@reduxjs/toolkit';
import {ProgressState} from './progressSlice';
import {ProgressMap, ProgressPayload} from '../../types';

export const handlePending = (state: ProgressState) => {
  state.isLoading = true;
};

export const handleFulfilledSaveProgress = (
  state: ProgressState,
  {payload}: PayloadAction<ProgressPayload>,
) => {
  state.isLoading = false;
  state.error = null;
  state.data = payload;
  state.updatedProgress = null;
};

export const handleOnlyUpdatedProgress = (
  state: ProgressState,
  {payload}: PayloadAction<ProgressMap>,
) => {
  if (!state.updatedProgress) {
    // üîß –Ø–∫—â–æ updatedProgress —â–µ –Ω–µ —ñ—Å–Ω—É—î ‚Äî —Å—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–∏–π –æ–± º—î–∫—Ç
    state.updatedProgress = {
      userId: 'local',
      progress: {...payload},
    };
  } else {
    // üîÅ –Ø–∫—â–æ –≤–∂–µ —ñ—Å–Ω—É—î ‚Äî –æ–Ω–æ–≤–ª—é—î–º–æ –ª–∏—à–µ –ø–æ—Ç—Ä—ñ–±–Ω—ñ –∫–ª—é—á—ñ
    for (const key in payload) {
      const typedKey = key as keyof ProgressMap;
      state.updatedProgress.progress[typedKey] = payload[typedKey];
    }
  }

  state.isLoading = false;
  state.error = null;
};

export const handleRejected = (
  state: ProgressState,
  {payload}: PayloadAction<string>,
) => {
  state.isLoading = false;
  state.error = payload;
};
